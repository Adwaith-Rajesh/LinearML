{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LinearML","text":"<p>\\(LinearML\\)</p>"},{"location":"ds/array/","title":"Array","text":""},{"location":"ds/array/#structure","title":"Structure","text":"<pre><code>typedef struct {\nsize_t size;\nfloat *arr;\n} Array;\n</code></pre> <p>Array is LinearML way of storing both the C array and the number of elements at the same time.</p>"},{"location":"ds/array/#examples","title":"Examples","text":""},{"location":"ds/array/#1-creating-a-simple-array","title":"1. Creating a simple Array","text":"<pre><code>#include \"ds/array.h\"\n\nint main(void) {\n// create an array with 3 values\nArray *arr = arr_create(3);\n\nARR_AT(arr, 0) = 1;  // set arr[0] = 1\nARR_AT(arr, 1) = 4;  // set arr[1] = 4\nARR_AT(arr, 2) = 5;  // set arr[2] = 5\n\narr_print(arr);\n\n// free Array crated using arr_crate\narr_free(arr);\n\nreturn 0;\n}\n</code></pre> <pre><code>[ 1.00 4.00 5.00 ]\n</code></pre>"},{"location":"ds/array/#2-create-an-array-using-existing-c-array","title":"2. Create an Array using existing C array","text":"<pre><code>#include \"ds/array.h\"\n\nint main(void) {\nfloat arr_vals[] = {1, 2, 3, 4};\n\n// use an existing C array with 4 values\nArray *arr = arr_init(arr_vals, 4);\n\nARR_AT(arr, 0) = 5;  // set arr[0] = 5\narr_print(arr);\n\n// free Array crated using arr_init\narr_init_free(arr);\nreturn 0;\n}\n</code></pre> <pre><code>[ 5.00 2.00 3.00 4.00 ]\n</code></pre>"},{"location":"ds/array/#3-changing-the-float-precision-during-printing","title":"3. Changing the float precision during printing","text":"<pre><code>#include \"ds/array.h\"\n\nint main(void) {\n// create an array with 3 values\nArray *arr = arr_create(3);\n\nARR_AT(arr, 0) = 1;  // set arr[0] = 1\nARR_AT(arr, 1) = 4;  // set arr[1] = 4\nARR_AT(arr, 2) = 5;  // set arr[2] = 5\n\n// use arr_printp instead of arr_print\narr_printp(arr, 0);\n\n// free Array crated using arr_crate\narr_free(arr);\n\nreturn 0;\n}\n</code></pre> <pre><code>[ 1 4 5 ]\n</code></pre>"},{"location":"ds/array/#4-map-a-function-over-the-array","title":"4. Map a function over the Array","text":"<pre><code>#include \"ds/array.h\"\n\nfloat add_three(float val) {\nreturn val + 3;\n}\n\nint main(void) {\n// create an array with 3 values\nArray *arr = arr_create(3);\n\nARR_AT(arr, 0) = 1;  // set arr[0] = 1\nARR_AT(arr, 1) = 4;  // set arr[1] = 4\nARR_AT(arr, 2) = 5;  // set arr[2] = 5\n\n// the function will return the same array back for\n// convenience reasons\narr_print(arr_map(arr, add_three));\n\n// free Array crated using arr_crate\narr_free(arr);\n\nreturn 0;\n}\n</code></pre> <pre><code>[ 4.00 7.00 8.00 ]\n</code></pre>"},{"location":"ds/array/#5-array-stats","title":"5. Array stats","text":"<pre><code>#include &lt;stdio.h&gt;\n\n#define INCLUDE_ARRAY_STATS\n#include \"ds/array.h\"\n\n\nint main(void) {\n// create an array with 3 values\nArray *arr = arr_create(3);\n\nARR_AT(arr, 0) = 1;  // set arr[0] = 1\nARR_AT(arr, 1) = 4;  // set arr[1] = 4\nARR_AT(arr, 2) = 5;  // set arr[2] = 5\n\narr_print(arr);\n\nprintf(\"Mean: %.2f\\n\", arr_mean(arr));\nprintf(\"Max: %.2f\\n\", arr_max(arr));\nprintf(\"Min: %.2f\\n\", arr_min(arr));\n\n// free Array crated using arr_crate\narr_free(arr);\n\nreturn 0;\n}\n</code></pre> <pre><code>[ 1.00 4.00 5.00 ]\nMean: 3.33\nMax: 5.00\nMin: 1.00\n</code></pre>"},{"location":"ds/mat/","title":"Mat","text":""},{"location":"ds/mat/#structure","title":"Structure","text":"<pre><code>typedef struct {\nfloat *elems;\nsize_t rows;\nsize_t cols;\n} Mat;\n</code></pre> <p>Internally the Matrix is 1D array where the values are stored in row major order.</p> <pre><code>/*\nCreate a rows x cols matrix\n*/\nMat *mat_create(size_t rows, size_t cols);\n\n/*\nCreate a Mat from an existing array\n*/\nMat *mat_create_from_array(float *arr, size_t rows, size_t cols);\n\n/*\nCreate a zero matrix of size rows x cols\n*/\nMat *mat_create_zeros(size_t rows, size_t cols);\n\n/*\nCreate a size x size identity matrix\n*/\nMat *mat_identity(size_t size);\n\n/*\nDisplay the given matrix\n*/\nvoid mat_printp(Mat *mat, int print_prec);\n\n/*\nFree a Mat\n*/\nvoid mat_free(Mat *mat);\n\n/*\nFree mat with user created arr\n*/\nvoid mat_free_no_array(Mat *mat);\n\n/*\nAdd two Mat of the same dimension\n\nAdds mat2 to mat1 and returns mat1\n*/\nMat *mat_add(Mat *mat1, Mat *mat2);\n\n/*\nSubtract two Mat of the same dimension\n\nSubtract mat2 from mat1 and returns mat1\n*/\nMat *mat_sub(Mat *mat1, Mat *mat2);\n\n/*\nMultiplies mat1 and mat2 and returns a new Mat\n\nyou need to free the new Mat\n*/\nMat *mat_mul(Mat *mat1, Mat *mat2);\n\n/*\nMultiplies a scalar value to the Mat and returns the given mat\n*/\nMat *mat_scalar_mul(Mat *mat, float val);\n\n/*\nReturns a new matrix that is the transpose of the given mat\n\nyou need to free the new matrix\n*/\nMat *mat_transpose(Mat *mat);\n\n/*\nFind the determinant of a matrix\n*/\nfloat mat_det(Mat *mat);\n\n/*\nFind the cofactor of a given elements in Mat\n*/\nfloat mat_cofactor(Mat *mat, size_t row, size_t col);\n\n/*\nReturns a new Mat, that is the cofactor matrix of the given Mat\n\nYou need to free the returned Mat\n*/\nMat *mat_cofactor_matrix(Mat *mat);\n\n/*\nReturns a new Mat that is the adjoint of the given Mat\n\nYou need to free the returned Mat;\n*/\nMat *mat_adj(Mat *mat);\n\n/*\nReturn a new Mat that is the inverse of the given Mat\n\nYou need to free the returned Mat\n*/\nMat *mat_inverse(Mat *mat);\n</code></pre> <p>Here is a simple example on finding the inverse of a matrix</p> <pre><code>#include &lt;stdio.h&gt;\n\n#include \"ds/mat.h\"\n\nint main(void) {\nMat *mat = mat_create(2, 2);\n\nMAT_AT(mat, 0, 0) = 4;\nMAT_AT(mat, 0, 1) = 7;\n\nMAT_AT(mat, 1, 0) = 2;\nMAT_AT(mat, 1, 1) = 6;\n\nmat_printp(mat, 5);\nprintf(\"\\n\");\n\nMat *adj = mat_adj(mat);\nmat_print(adj);\n\nprintf(\"\\n\");\n\nMat *inv = mat_inverse(mat);\nmat_printp(inv, 7);\n\nmat_free(mat);\nmat_free(adj);\nmat_free(inv);\n\nreturn 0;\n}\n</code></pre> <pre><code>  4.00000   7.00000\n  2.00000   6.00000\n\n  6.00   -7.00\n  -2.00   4.00\n\n  0.6000000   -0.7000000\n  -0.2000000   0.4000000\n</code></pre> <p>If you have any queries feel free to contact me through any of the socials given below</p>"},{"location":"ds/mat/#1-available-functions","title":"1. Available functions.","text":""},{"location":"ds/mat/#2-examples","title":"2. Examples.","text":""},{"location":"ds/vec/","title":"vec","text":""},{"location":"ds/vec/#this-is-the-vec-file","title":"this is the vec file","text":""},{"location":"ml/linregress/","title":"Linear Regression","text":"<p>\\(\\text{Hello World}\\)</p>"}]}