#!/bin/env buildme
from pathlib import Path

from buildme import CommandRunner
from buildme import target, mkdir, rmdir, get_files_in_dir, get_file_name

CC = 'gcc'
C_FLAGS = '-Wall -Wextra -std=c11'
C_LIBS = '-lm'
C_INCLUDES = '-I./include -I./src'

BUILD_DIR = './build'
OUT_DIR = BUILD_DIR + '/out'
LIB_DIR = BUILD_DIR + '/lib'
GSL_DIR = ''

SRC_DIR = './src'
DS_DIR = SRC_DIR + '/ds'
UTILS_DIR = SRC_DIR + '/utils'
ML_DIR = SRC_DIR + '/ml'
STATS_DIR = SRC_DIR + '/stats'
PARSERS_DIR = SRC_DIR + '/parsers'

files_to_compile = [f'f:{UTILS_DIR}/*.c', f'f:{ML_DIR}/*.c', f'f:{STATS_DIR}/*.c',
                    f'f:{DS_DIR}/*.c', f'f:{PARSERS_DIR}/*.c']
header_files = list(map(lambda x: f'f:{x}', get_files_in_dir('./include/**/*.h', recurse=True)))


cr = CommandRunner(print_cmd_sep=False)


def cc():
    return f'{CC} {C_FLAGS} {C_INCLUDES} {C_LIBS} '


def create_object_file(c_file: str):
    o_file = get_file_name(c_file).replace('.c', '.o')
    cr.run(f'{cc()} -fPIC -c {c_file} -o {OUT_DIR}/{o_file}')
    return o_file


@target(creates=[f'{LIB_DIR}/liblinearml.so'], depends=['gen_o_files', f'f:{OUT_DIR}/*.o'])
def liblinearml_so(_, t):
    o_files = ' '.join(get_files_in_dir(f'{OUT_DIR}/*.o'))

    # add GSL files
    if GSL_DIR:
        gsl_files = f'{Path(GSL_DIR) / "lib/libgsl.a"} {Path(GSL_DIR) / "lib/libgslcblas.a"}'
    else:
        gsl_files = ''

    cr.run(f'{cc()} -shared -fPIC {o_files} {gsl_files} -o {t.creates.files[0]}')


@target(creates=[f'{OUT_DIR}/*.o'], depends=files_to_compile + header_files)
def gen_o_files(_, t):
    for c_file in t.depends.files:
        if c_file.endswith('.h'):
            continue
        create_object_file(c_file)


@target()
def init(opts, _):
    mkdir(BUILD_DIR)
    mkdir(OUT_DIR)
    mkdir(LIB_DIR)

    global C_FLAGS
    global CC
    global GSL_DIR
    global C_INCLUDES

    if getattr(opts, 'release', None) is not None:
        if opts.release == '1':
            C_FLAGS += ' -O3'
        else:
            C_FLAGS += ' -g'

    if getattr(opts, 'cc', None) is not None:
        CC = opts.cc

    if getattr(opts, 'gslpath', None) is not None:
        GSL_DIR = opts.gslpath
        C_INCLUDES += f' -I{Path(GSL_DIR) / "include"}'


@target()
def clean(_, __):
    rmdir('./build')


@target(depends=['init', 'liblinearml_so'])
def all(_, __): pass
